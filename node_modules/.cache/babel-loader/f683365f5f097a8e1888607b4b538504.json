{"ast":null,"code":"import request from \"../../api\";\nimport { COMMENT_LIST_FAIL, COMMENT_LIST_REQUEST, COMMENT_LIST_SUCCESS, CREATE_COMMENT_SUCCESS, CREATE_COMMENT_FAIL } from \"../actionType\";\nexport const getCommentsOfVideoById = id => async dispatch => {\n  try {\n    dispatch({\n      type: COMMENT_LIST_REQUEST\n    });\n    const {\n      data\n    } = await request(\"/commentThreads\", {\n      params: {\n        part: \"snippet\",\n        videoId: id\n      }\n    });\n    dispatch({\n      type: COMMENT_LIST_SUCCESS,\n      payload: data.items\n    });\n  } catch (error) {\n    console.log(error.response.data);\n    dispatch({\n      type: COMMENT_LIST_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\nexport const addComment = (id, text) => async (dispatch, getState) => {\n  try {\n    const obj = {\n      snippet: {\n        videoId: id,\n        topLevelComment: {\n          snippet: {\n            textOriginal: text\n          }\n        }\n      }\n    };\n    await request.post(\"/commentThreads\", obj, {\n      params: {\n        part: \"snippet\"\n      },\n      headers: {\n        Authorization: `Bearer ${getState().auth.accessToken}`\n      }\n    });\n    dispatch({\n      type: CREATE_COMMENT_SUCCESS\n    });\n    setTimeout(() => dispatch(getCommentsOfVideoById(id)), 2000);\n  } catch (error) {\n    console.log(error.response.data);\n    dispatch({\n      type: CREATE_COMMENT_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};","map":{"version":3,"sources":["/home/eshan/Desktop/newfolder/yt-clone/src/redux/actions/comments.action.js"],"names":["request","COMMENT_LIST_FAIL","COMMENT_LIST_REQUEST","COMMENT_LIST_SUCCESS","CREATE_COMMENT_SUCCESS","CREATE_COMMENT_FAIL","getCommentsOfVideoById","id","dispatch","type","data","params","part","videoId","payload","items","error","console","log","response","message","addComment","text","getState","obj","snippet","topLevelComment","textOriginal","post","headers","Authorization","auth","accessToken","setTimeout"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;AACA,SACEC,iBADF,EAEEC,oBAFF,EAGEC,oBAHF,EAIEC,sBAJF,EAKEC,mBALF,QAMO,eANP;AAQA,OAAO,MAAMC,sBAAsB,GAAIC,EAAD,IAAQ,MAAOC,QAAP,IAAoB;AAChE,MAAI;AACFA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEP;AADC,KAAD,CAAR;AAIA,UAAM;AAAEQ,MAAAA;AAAF,QAAW,MAAMV,OAAO,CAAC,iBAAD,EAAoB;AAChDW,MAAAA,MAAM,EAAE;AACNC,QAAAA,IAAI,EAAE,SADA;AAENC,QAAAA,OAAO,EAAEN;AAFH;AADwC,KAApB,CAA9B;AAMAC,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEN,oBADC;AAEPW,MAAAA,OAAO,EAAEJ,IAAI,CAACK;AAFP,KAAD,CAAR;AAID,GAfD,CAeE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,QAAN,CAAeT,IAA3B;AACAF,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAER,iBADC;AAEPa,MAAAA,OAAO,EAAEE,KAAK,CAACG,QAAN,CAAeT,IAAf,CAAoBU;AAFtB,KAAD,CAAR;AAID;AACF,CAvBM;AAyBP,OAAO,MAAMC,UAAU,GAAG,CAACd,EAAD,EAAKe,IAAL,KAAc,OAAOd,QAAP,EAAiBe,QAAjB,KAA8B;AACpE,MAAI;AACF,UAAMC,GAAG,GAAG;AACVC,MAAAA,OAAO,EAAE;AACPZ,QAAAA,OAAO,EAAEN,EADF;AAEPmB,QAAAA,eAAe,EAAE;AACfD,UAAAA,OAAO,EAAE;AACPE,YAAAA,YAAY,EAAEL;AADP;AADM;AAFV;AADC,KAAZ;AAWA,UAAMtB,OAAO,CAAC4B,IAAR,CAAa,iBAAb,EAAgCJ,GAAhC,EAAqC;AACzCb,MAAAA,MAAM,EAAE;AACNC,QAAAA,IAAI,EAAE;AADA,OADiC;AAIzCiB,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAG,UAASP,QAAQ,GAAGQ,IAAX,CAAgBC,WAAY;AAD9C;AAJgC,KAArC,CAAN;AAQAxB,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEL;AADC,KAAD,CAAR;AAIA6B,IAAAA,UAAU,CAAC,MAAMzB,QAAQ,CAACF,sBAAsB,CAACC,EAAD,CAAvB,CAAf,EAA6C,IAA7C,CAAV;AACD,GAzBD,CAyBE,OAAOS,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,QAAN,CAAeT,IAA3B;AACAF,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEJ,mBADC;AAEPS,MAAAA,OAAO,EAAEE,KAAK,CAACG,QAAN,CAAeT,IAAf,CAAoBU;AAFtB,KAAD,CAAR;AAID;AACF,CAjCM","sourcesContent":["import request from \"../../api\";\nimport {\n  COMMENT_LIST_FAIL,\n  COMMENT_LIST_REQUEST,\n  COMMENT_LIST_SUCCESS,\n  CREATE_COMMENT_SUCCESS,\n  CREATE_COMMENT_FAIL,\n} from \"../actionType\";\n\nexport const getCommentsOfVideoById = (id) => async (dispatch) => {\n  try {\n    dispatch({\n      type: COMMENT_LIST_REQUEST,\n    });\n\n    const { data } = await request(\"/commentThreads\", {\n      params: {\n        part: \"snippet\",\n        videoId: id,\n      },\n    });\n    dispatch({\n      type: COMMENT_LIST_SUCCESS,\n      payload: data.items,\n    });\n  } catch (error) {\n    console.log(error.response.data);\n    dispatch({\n      type: COMMENT_LIST_FAIL,\n      payload: error.response.data.message,\n    });\n  }\n};\n\nexport const addComment = (id, text) => async (dispatch, getState) => {\n  try {\n    const obj = {\n      snippet: {\n        videoId: id,\n        topLevelComment: {\n          snippet: {\n            textOriginal: text,\n          },\n        },\n      },\n    };\n\n    await request.post(\"/commentThreads\", obj, {\n      params: {\n        part: \"snippet\",\n      },\n      headers: {\n        Authorization: `Bearer ${getState().auth.accessToken}`,\n      },\n    });\n    dispatch({\n      type: CREATE_COMMENT_SUCCESS,\n    });\n\n    setTimeout(() => dispatch(getCommentsOfVideoById(id)), 2000);\n  } catch (error) {\n    console.log(error.response.data);\n    dispatch({\n      type: CREATE_COMMENT_FAIL,\n      payload: error.response.data.message,\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}