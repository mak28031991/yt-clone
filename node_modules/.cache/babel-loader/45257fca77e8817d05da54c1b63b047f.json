{"ast":null,"code":"import { HOME_VIDEOS_FAIL, HOME_VIDEOS_REQUEST, HOME_VIDEOS_SUCCESS, RELATED_VIDEO_FAIL, RELATED_VIDEO_REQUEST, RELATED_VIDEO_SUCCESS, SEARCH_VIDEO_FAIL, SEARCH_VIDEO_REQUEST, SEARCH_VIDEO_SUCCESS, SELECTED_VIDEOS_FAIL, SELECTED_VIDEOS_REQUEST, SELECTED_VIDEOS_SUCCESS } from \"../actionType\";\nimport request from \"../../api\";\nexport const getPopularVideos = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: HOME_VIDEOS_REQUEST\n    });\n    const {\n      data\n    } = await request(\"/videos\", {\n      params: {\n        part: \"snippet,contentDetails,statistics\",\n        chart: \"mostPopular\",\n        regionCode: \"IN\",\n        maxResults: 20,\n        pageToken: getState().homeVideos.nextPageToken\n      }\n    });\n    dispatch({\n      type: HOME_VIDEOS_SUCCESS,\n      payload: {\n        videos: data.items,\n        nextPageToken: data.nextPageToken,\n        category: \"All\"\n      }\n    });\n  } catch (error) {\n    console.log(error.message);\n    dispatch({\n      type: HOME_VIDEOS_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const getVideosByCategory = keyword => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: HOME_VIDEOS_REQUEST\n    });\n    const {\n      data\n    } = await request(\"/search\", {\n      params: {\n        part: \"snippet\",\n        maxResults: 20,\n        pageToken: getState().homeVideos.nextPageToken,\n        q: keyword,\n        type: \"video\"\n      }\n    });\n    dispatch({\n      type: HOME_VIDEOS_SUCCESS,\n      payload: {\n        videos: data.items,\n        nextPageToken: data.nextPageToken,\n        category: keyword\n      }\n    });\n  } catch (error) {\n    console.log(error.message);\n    dispatch({\n      type: HOME_VIDEOS_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const getVideoById = id => async dispatch => {\n  try {\n    dispatch({\n      type: SELECTED_VIDEOS_REQUEST\n    });\n    const {\n      data\n    } = await request(\"/videos\", {\n      params: {\n        part: \"snippet,statistics\",\n        id: id\n      }\n    });\n    dispatch({\n      type: SELECTED_VIDEOS_SUCCESS,\n      payload: data.items[0]\n    });\n  } catch (error) {\n    console.log(error.message);\n    dispatch({\n      type: SELECTED_VIDEOS_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const getRelatedVideos = id => async dispatch => {\n  try {\n    dispatch({\n      type: RELATED_VIDEO_REQUEST\n    });\n    const {\n      data\n    } = await request(\"/search\", {\n      params: {\n        part: \"snippet\",\n        relatedToVideoId: id,\n        maxResults: 15,\n        type: \"video\"\n      }\n    });\n    dispatch({\n      type: RELATED_VIDEO_SUCCESS,\n      payload: data.items\n    });\n  } catch (error) {\n    console.log(error.response.data.message);\n    dispatch({\n      type: RELATED_VIDEO_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\nexport const getVideosBySearch = keyword => async dispatch => {\n  try {\n    dispatch({\n      type: SEARCH_VIDEO_REQUEST\n    });\n    const {\n      data\n    } = await request(\"/search\", {\n      params: {\n        part: \"snippet\",\n        maxResults: 20,\n        q: keyword,\n        type: \"video,channel\"\n      }\n    });\n    dispatch({\n      type: SEARCH_VIDEO_SUCCESS,\n      payload: data.items\n    });\n  } catch (error) {\n    console.log(error.message);\n    dispatch({\n      type: SEARCH_VIDEO_FAIL,\n      payload: error.message\n    });\n  }\n};","map":{"version":3,"sources":["/home/eshan/Desktop/newfolder/yt-clone/src/redux/actions/videos.action.js"],"names":["HOME_VIDEOS_FAIL","HOME_VIDEOS_REQUEST","HOME_VIDEOS_SUCCESS","RELATED_VIDEO_FAIL","RELATED_VIDEO_REQUEST","RELATED_VIDEO_SUCCESS","SEARCH_VIDEO_FAIL","SEARCH_VIDEO_REQUEST","SEARCH_VIDEO_SUCCESS","SELECTED_VIDEOS_FAIL","SELECTED_VIDEOS_REQUEST","SELECTED_VIDEOS_SUCCESS","request","getPopularVideos","dispatch","getState","type","data","params","part","chart","regionCode","maxResults","pageToken","homeVideos","nextPageToken","payload","videos","items","category","error","console","log","message","getVideosByCategory","keyword","q","getVideoById","id","getRelatedVideos","relatedToVideoId","response","getVideosBySearch"],"mappings":"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","sourcesContent":["import {\n  HOME_VIDEOS_FAIL,\n  HOME_VIDEOS_REQUEST,\n  HOME_VIDEOS_SUCCESS,\n  RELATED_VIDEO_FAIL,\n  RELATED_VIDEO_REQUEST,\n  RELATED_VIDEO_SUCCESS,\n  SEARCH_VIDEO_FAIL,\n  SEARCH_VIDEO_REQUEST,\n  SEARCH_VIDEO_SUCCESS,\n  SELECTED_VIDEOS_FAIL,\n  SELECTED_VIDEOS_REQUEST,\n  SELECTED_VIDEOS_SUCCESS,\n} from \"../actionType\";\n\nimport request from \"../../api\";\n\nexport const getPopularVideos = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: HOME_VIDEOS_REQUEST,\n    });\n    const { data } = await request(\"/videos\", {\n      params: {\n        part: \"snippet,contentDetails,statistics\",\n        chart: \"mostPopular\",\n        regionCode: \"IN\",\n        maxResults: 20,\n        pageToken: getState().homeVideos.nextPageToken,\n      },\n    });\n\n    dispatch({\n      type: HOME_VIDEOS_SUCCESS,\n      payload: {\n        videos: data.items,\n        nextPageToken: data.nextPageToken,\n        category: \"All\",\n      },\n    });\n  } catch (error) {\n    console.log(error.message);\n    dispatch({\n      type: HOME_VIDEOS_FAIL,\n      payload: error.message,\n    });\n  }\n};\n\nexport const getVideosByCategory = (keyword) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: HOME_VIDEOS_REQUEST,\n    });\n    const { data } = await request(\"/search\", {\n      params: {\n        part: \"snippet\",\n        maxResults: 20,\n        pageToken: getState().homeVideos.nextPageToken,\n        q: keyword,\n        type: \"video\",\n      },\n    });\n\n    dispatch({\n      type: HOME_VIDEOS_SUCCESS,\n      payload: {\n        videos: data.items,\n        nextPageToken: data.nextPageToken,\n        category: keyword,\n      },\n    });\n  } catch (error) {\n    console.log(error.message);\n    dispatch({\n      type: HOME_VIDEOS_FAIL,\n      payload: error.message,\n    });\n  }\n};\n\nexport const getVideoById = (id) => async (dispatch) => {\n  try {\n    dispatch({\n      type: SELECTED_VIDEOS_REQUEST,\n    });\n    const { data } = await request(\"/videos\", {\n      params: {\n        part: \"snippet,statistics\",\n        id: id,\n      },\n    });\n    dispatch({\n      type: SELECTED_VIDEOS_SUCCESS,\n      payload: data.items[0],\n    });\n  } catch (error) {\n    console.log(error.message);\n    dispatch({\n      type: SELECTED_VIDEOS_FAIL,\n      payload: error.message,\n    });\n  }\n};\n\nexport const getRelatedVideos = (id) => async (dispatch) => {\n  try {\n    dispatch({\n      type: RELATED_VIDEO_REQUEST,\n    });\n\n    const { data } = await request(\"/search\", {\n      params: {\n        part: \"snippet\",\n        relatedToVideoId: id,\n        maxResults: 15,\n        type: \"video\",\n      },\n    });\n    dispatch({\n      type: RELATED_VIDEO_SUCCESS,\n      payload: data.items,\n    });\n  } catch (error) {\n    console.log(error.response.data.message);\n    dispatch({\n      type: RELATED_VIDEO_FAIL,\n      payload: error.response.data.message,\n    });\n  }\n};\n\nexport const getVideosBySearch = (keyword) => async (dispatch) => {\n  try {\n    dispatch({\n      type: SEARCH_VIDEO_REQUEST,\n    });\n    const { data } = await request(\"/search\", {\n      params: {\n        part: \"snippet\",\n        maxResults: 20,\n        q: keyword,\n        type: \"video,channel\",\n      },\n    });\n\n    dispatch({\n      type: SEARCH_VIDEO_SUCCESS,\n      payload: data.items,\n    });\n  } catch (error) {\n    console.log(error.message);\n    dispatch({\n      type: SEARCH_VIDEO_FAIL,\n      payload: error.message,\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}